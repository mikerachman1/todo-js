(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),a=n.n(r),i=n(645),o=n.n(i)()(a());o.push([e.id,'body {\n  margin: 0;\n}\n\nh1 {\n  color: red;\n}\n\n.header {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n  background-color: #f5f5fa;\n  grid-area: header;\n}\n\n.sidebar {\n  background-color: #cacfff;\n  grid-area: sidebar;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 1rem;\n  gap: 1rem;\n}\n\n.sidebar .project {\n  cursor: pointer;\n  border: 1px solid black;\n  border-radius: 6px;\n  padding: 8px;\n  margin-bottom: 1rem\n}\n\n.project-buttons {\n  padding-top: 1rem;\n}\n\n.overlay {\n  visibility: hidden;\n  background-color: #0000009f;\n  position: fixed;\n  top: 0; left: 0;\n  width: 100vw; height: 100%;\n  z-index: 100;\n}\n\n.new-task-div {\n  width: 10px;\n  left: 50%;\n  position: absolute;\n  visibility: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  z-index: 101;\n  top: 25%;\n}\n\n#new-task {\n  border: 1px solid #ced4da;\n  appearance: none;\n  border-radius: 4px;\n  background-color: #fff;\n  background-clip: padding-box;\n  padding: 2rem;\n  position: relative;\n  left: -50%;\n  width: 250px;\n}\n\n#body {\n  grid-area: body;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin: 0 .8rem;\n}\n\n#body > :first-child {\n  margin-top: .8rem;\n}\n\n.task {\n  border: 1px solid black;\n  border-radius: 8px;\n  padding: 1rem;\n}\n\n.priority {\n  width: 40px;\n  height: 30px;\n  background-color: red;\n  border-radius: 8px;\n}\n\n.task-main {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.task-details{\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding-right: 1rem;\n}\n\n.expanded-task {\n  justify-content: space-between;\n  margin-top: 1rem;\n  border-top: 1px solid black;\n  padding-top: 0.4rem;\n}\n\n#content {\n  display: grid;\n  /* gap: 20px; */\n  grid-template-columns: 1fr 3fr;\n  grid-template-areas: \n    "header header"\n    "sidebar body";\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,6BAA6B;EAC7B,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,SAAS;AACX;;AAEA;EACE,eAAe;EACf,uBAAuB;EACvB,kBAAkB;EAClB,YAAY;EACZ;AACF;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,2BAA2B;EAC3B,eAAe;EACf,MAAM,EAAE,OAAO;EACf,YAAY,EAAE,YAAY;EAC1B,YAAY;AACd;;AAEA;EACE,WAAW;EACX,SAAS;EACT,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,QAAQ;AACV;;AAEA;EACE,yBAAyB;EACzB,gBAAgB;EAChB,kBAAkB;EAClB,sBAAsB;EACtB,4BAA4B;EAC5B,aAAa;EACb,kBAAkB;EAClB,UAAU;EACV,YAAY;AACd;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,8BAA8B;EAC9B,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;EAChB,2BAA2B;EAC3B,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,8BAA8B;EAC9B;;kBAEgB;AAClB",sourcesContent:['body {\n  margin: 0;\n}\n\nh1 {\n  color: red;\n}\n\n.header {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n  background-color: #f5f5fa;\n  grid-area: header;\n}\n\n.sidebar {\n  background-color: #cacfff;\n  grid-area: sidebar;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 1rem;\n  gap: 1rem;\n}\n\n.sidebar .project {\n  cursor: pointer;\n  border: 1px solid black;\n  border-radius: 6px;\n  padding: 8px;\n  margin-bottom: 1rem\n}\n\n.project-buttons {\n  padding-top: 1rem;\n}\n\n.overlay {\n  visibility: hidden;\n  background-color: #0000009f;\n  position: fixed;\n  top: 0; left: 0;\n  width: 100vw; height: 100%;\n  z-index: 100;\n}\n\n.new-task-div {\n  width: 10px;\n  left: 50%;\n  position: absolute;\n  visibility: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  z-index: 101;\n  top: 25%;\n}\n\n#new-task {\n  border: 1px solid #ced4da;\n  appearance: none;\n  border-radius: 4px;\n  background-color: #fff;\n  background-clip: padding-box;\n  padding: 2rem;\n  position: relative;\n  left: -50%;\n  width: 250px;\n}\n\n#body {\n  grid-area: body;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin: 0 .8rem;\n}\n\n#body > :first-child {\n  margin-top: .8rem;\n}\n\n.task {\n  border: 1px solid black;\n  border-radius: 8px;\n  padding: 1rem;\n}\n\n.priority {\n  width: 40px;\n  height: 30px;\n  background-color: red;\n  border-radius: 8px;\n}\n\n.task-main {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.task-details{\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding-right: 1rem;\n}\n\n.expanded-task {\n  justify-content: space-between;\n  margin-top: 1rem;\n  border-top: 1px solid black;\n  padding-top: 0.4rem;\n}\n\n#content {\n  display: grid;\n  /* gap: 20px; */\n  grid-template-columns: 1fr 3fr;\n  grid-template-areas: \n    "header header"\n    "sidebar body";\n}'],sourceRoot:""}]);const d=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var d=0;d<this.length;d++){var u=this[d][0];null!=u&&(o[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],d=0;d<e.length;d++){var u=e[d],s=r.base?u[0]+r.base:u[0],c=i[s]||0,l="".concat(s," ").concat(c);i[s]=c+1;var m=n(l),f={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==m)t[m].references++,t[m].updater(f);else{var p=a(f,r);r.byIndex=d,t.splice(d,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var d=n(i[o]);t[d].references--}for(var u=r(e,a),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=u}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),i=n(569),o=n.n(i),d=n(565),u=n.n(d),s=n(216),c=n.n(s),l=n(589),m=n.n(l),f=n(426),p={};p.styleTagTransform=m(),p.setAttributes=u(),p.insert=o().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=c(),t()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;const h=(e,t,n={})=>{let r=0;for(const e in n)n[e].dueDate=new Date(n[e].dueDate);return{addTask:e=>{n[r]=e,r++},getTasks:()=>n,getName:()=>t,setName:e=>{t=e},getCounter:()=>r,setCounter:e=>{r=e},getId:()=>e,deleteTask:e=>{delete n[e]}}};function g(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function y(e){return g(1,arguments),e instanceof Date||"object"===v(e)&&"[object Date]"===Object.prototype.toString.call(e)}function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function A(e){g(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===b(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(e){if(g(1,arguments),!y(e)&&"number"!=typeof e)return!1;var t=A(e);return!isNaN(Number(t))}function C(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function E(e,t){g(2,arguments);var n=A(e).getTime(),r=C(t);return new Date(n+r)}function k(e,t){g(2,arguments);var n=C(t);return E(e,-n)}var T=864e5;function B(e){g(1,arguments);var t=1,n=A(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function x(e){g(1,arguments);var t=A(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=B(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=B(i);return t.getTime()>=a.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}function M(e){g(1,arguments);var t=x(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=B(n);return r}var S=6048e5,D={};function N(){return D}function j(e,t){var n,r,a,i,o,d,u,s;g(1,arguments);var c=N(),l=C(null!==(n=null!==(r=null!==(a=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==a?a:c.weekStartsOn)&&void 0!==r?r:null===(u=c.locale)||void 0===u||null===(s=u.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=A(e),f=m.getUTCDay(),p=(f<l?7:0)+f-l;return m.setUTCDate(m.getUTCDate()-p),m.setUTCHours(0,0,0,0),m}function U(e,t){var n,r,a,i,o,d,u,s;g(1,arguments);var c=A(e),l=c.getUTCFullYear(),m=N(),f=C(null!==(n=null!==(r=null!==(a=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==a?a:m.firstWeekContainsDate)&&void 0!==r?r:null===(u=m.locale)||void 0===u||null===(s=u.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(l+1,0,f),p.setUTCHours(0,0,0,0);var h=j(p,t),v=new Date(0);v.setUTCFullYear(l,0,f),v.setUTCHours(0,0,0,0);var y=j(v,t);return c.getTime()>=h.getTime()?l+1:c.getTime()>=y.getTime()?l:l-1}function L(e,t){var n,r,a,i,o,d,u,s;g(1,arguments);var c=N(),l=C(null!==(n=null!==(r=null!==(a=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(d=o.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==a?a:c.firstWeekContainsDate)&&void 0!==r?r:null===(u=c.locale)||void 0===u||null===(s=u.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1),m=U(e,t),f=new Date(0);f.setUTCFullYear(m,0,l),f.setUTCHours(0,0,0,0);var p=j(f,t);return p}var P=6048e5;function Y(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const q=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return Y("yy"===t?r%100:r,t.length)},$=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):Y(n+1,2)},W=function(e,t){return Y(e.getUTCDate(),t.length)},H=function(e,t){return Y(e.getUTCHours()%12||12,t.length)},O=function(e,t){return Y(e.getUTCHours(),t.length)},I=function(e,t){return Y(e.getUTCMinutes(),t.length)},F=function(e,t){return Y(e.getUTCSeconds(),t.length)},z=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return Y(Math.floor(r*Math.pow(10,n-3)),t.length)};var R={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return q(e,t)},Y:function(e,t,n,r){var a=U(e,r),i=a>0?a:1-a;return"YY"===t?Y(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):Y(i,t.length)},R:function(e,t){return Y(x(e),t.length)},u:function(e,t){return Y(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return Y(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return Y(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return $(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return Y(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){g(1,arguments);var n=A(e),r=j(n,t).getTime()-L(n,t).getTime();return Math.round(r/P)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):Y(a,t.length)},I:function(e,t,n){var r=function(e){g(1,arguments);var t=A(e),n=B(t).getTime()-M(t).getTime();return Math.round(n/S)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):Y(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):W(e,t)},D:function(e,t,n){var r=function(e){g(1,arguments);var t=A(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/T)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):Y(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return Y(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return Y(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return Y(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return H(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):O(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):Y(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):Y(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):I(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):F(e,t)},S:function(e,t){return z(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return Q(a);case"XXXX":case"XX":return G(a);default:return G(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Q(a);case"xxxx":case"xx":return G(a);default:return G(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+X(a,":");default:return"GMT"+G(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+X(a,":");default:return"GMT"+G(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return Y(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return Y((r._originalDate||e).getTime(),t.length)}};function X(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=t||"";return n+String(a)+o+Y(i,2)}function Q(e,t){return e%60==0?(e>0?"-":"+")+Y(Math.abs(e)/60,2):G(e,t)}function G(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+Y(Math.floor(a/60),2)+n+Y(a%60,2)}const Z=R;var J=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},_=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const V={p:_,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return J(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",J(a,t)).replace("{{time}}",_(i,t))}};function K(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var ee=["D","DD"],te=["YY","YYYY"];function ne(e){return-1!==ee.indexOf(e)}function re(e){return-1!==te.indexOf(e)}function ae(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ie={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function oe(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}const de={date:oe({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:oe({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:oe({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var ue={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function se(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):a;r=e.formattingValues[i]||e.formattingValues[a]}else{var o=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[d]||e.values[o]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const ce={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:se({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:se({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:se({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:se({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:se({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function le(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,d=i[0],u=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(u)?fe(u,(function(e){return e.test(d)})):me(u,(function(e){return e.test(d)}));o=e.valueCallback?e.valueCallback(s):s,o=n.valueCallback?n.valueCallback(o):o;var c=t.slice(d.length);return{value:o,rest:c}}}function me(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function fe(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var pe,he={ordinalNumber:(pe={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(pe.matchPattern);if(!n)return null;var r=n[0],a=e.match(pe.parsePattern);if(!a)return null;var i=pe.valueCallback?pe.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=e.slice(r.length);return{value:i,rest:o}}),era:le({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:le({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:le({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:le({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:le({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ge={code:"en-US",formatDistance:function(e,t,n){var r,a=ie[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:de,formatRelative:function(e,t,n,r){return ue[e]},localize:ce,match:he,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ve=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ye=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,be=/^'([^]*?)'?$/,Ae=/''/g,we=/[a-zA-Z]/;function Ce(e,t,n){var r,a,i,o,d,u,s,c,l,m,f,p,h,v,y,b,E,T;g(2,arguments);var B=String(t),x=N(),M=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:x.locale)&&void 0!==r?r:ge,S=C(null!==(i=null!==(o=null!==(d=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(s=n.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==d?d:x.firstWeekContainsDate)&&void 0!==o?o:null===(l=x.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(S>=1&&S<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=C(null!==(f=null!==(p=null!==(h=null!==(v=null==n?void 0:n.weekStartsOn)&&void 0!==v?v:null==n||null===(y=n.locale)||void 0===y||null===(b=y.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==h?h:x.weekStartsOn)&&void 0!==p?p:null===(E=x.locale)||void 0===E||null===(T=E.options)||void 0===T?void 0:T.weekStartsOn)&&void 0!==f?f:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var j=A(e);if(!w(j))throw new RangeError("Invalid time value");var U=K(j),L=k(j,U),P={firstWeekContainsDate:S,weekStartsOn:D,locale:M,_originalDate:j},Y=B.match(ye).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,V[t])(e,M.formatLong):e})).join("").match(ve).map((function(r){if("''"===r)return"'";var a=r[0];if("'"===a)return Ee(r);var i=Z[a];if(i)return null!=n&&n.useAdditionalWeekYearTokens||!re(r)||ae(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!ne(r)||ae(r,t,String(e)),i(L,r,M.localize,P);if(a.match(we))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("");return Y}function Ee(e){var t=e.match(be);return t?t[1].replace(Ae,"'"):e}Math.pow(10,8);var ke=36e5;function Te(e,t){var n;g(1,arguments);var r=C(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,i=De(e);if(i.date){var o=Ne(i.date,r);a=je(o.restDateString,o.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var d,u=a.getTime(),s=0;if(i.time&&(s=Le(i.time),isNaN(s)))return new Date(NaN);if(!i.timezone){var c=new Date(u+s),l=new Date(0);return l.setFullYear(c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()),l.setHours(c.getUTCHours(),c.getUTCMinutes(),c.getUTCSeconds(),c.getUTCMilliseconds()),l}return d=Ye(i.timezone),isNaN(d)?new Date(NaN):new Date(u+s+d)}var Be={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},xe=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Me=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Se=/^([+-])(\d{2})(?::?(\d{2}))?$/;function De(e){var t,n={},r=e.split(Be.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],Be.timeZoneDelimiter.test(n.date)&&(n.date=e.split(Be.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=Be.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function Ne(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?a:100*i,restDateString:e.slice((r[1]||r[2]).length)}}function je(e,t){if(null===t)return new Date(NaN);var n=e.match(xe);if(!n)return new Date(NaN);var r=!!n[4],a=Ue(n[1]),i=Ue(n[2])-1,o=Ue(n[3]),d=Ue(n[4]),u=Ue(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,d,u)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,d,u):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(qe[t]||($e(e)?29:28))}(t,i,o)&&function(e,t){return t>=1&&t<=($e(e)?366:365)}(t,a)?(s.setUTCFullYear(t,i,Math.max(a,o)),s):new Date(NaN)}function Ue(e){return e?parseInt(e):1}function Le(e){var t=e.match(Me);if(!t)return NaN;var n=Pe(t[1]),r=Pe(t[2]),a=Pe(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*ke+6e4*r+1e3*a:NaN}function Pe(e){return e&&parseFloat(e.replace(",","."))||0}function Ye(e){if("Z"===e)return 0;var t=e.match(Se);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*ke+6e4*a):NaN}var qe=[31,null,31,30,31,30,31,31,30,31,30,31];function $e(e){return e%400==0||e%4==0&&e%100!=0}function We(e,t){let n=[];for(const t of e){let e={counter:t.getCounter(),name:t.getName(),tasks:t.getTasks()};n.push(e)}localStorage.setItem("projects",JSON.stringify(n)),localStorage.setItem("currentProject",e.indexOf(t))}function He(e,t){const n=document.getElementById("body");let r="";const a=t.getTasks();Object.values(a).forEach((e=>{r+=`<div class='task-${e.id} task'>\n              <div class="task-main-${e.id} task-main">\n                <div class="task-details-${e.id} task-details">\n                  <div class='priority-${e.id} priority'></div>\n                  <span class='task-title-${e.id}'>${e.title}</span>\n                  <span class='task-date-${e.id} task-date'>${Ce(e.dueDate,"M/dd/yy")}</span>\n                </div>\n                <input type="checkbox" class='task-checkbox-${e.id}'>\n              </div>\n              <div class="expanded-task-${e.id} expanded-task">\n                <span class='task-description-${e.id} task-description'>${e.description}</span>\n                <span class='task-buttons-${e.id}'>\n                  <button class='task-edit-${e.id}'>Edit</button>\n                  <button class='task-delete-${e.id}'>Delete</button>\n                </span>\n              </div>\n            </div>`})),n.innerHTML=r,Object.values(a).forEach((n=>{const r=document.querySelector(`.task-checkbox-${n.id}`),a=document.querySelector(`.task-title-${n.id}`),i=document.querySelector(`.expanded-task-${n.id}`),o=document.querySelector(`.task-delete-${n.id}`),d=document.querySelector(`.task-${n.id}`),u=document.querySelector(`.priority-${n.id}`),s=document.querySelector(`.task-details-${n.id}`),c=document.querySelector(`.task-main-${n.id}`),l=document.querySelector(`.task-date-${n.id}`),m=document.querySelector(`.task-description-${n.id}`);function f(){"high"==n.priority?u.style.backgroundColor="#d4142a":"moderate"==n.priority?u.style.backgroundColor="#e8600a":u.style.backgroundColor="#06b66c"}i.style.display="none",s.addEventListener("click",(function(){"none"==i.style.display?i.style.display="flex":i.style.display="none"})),n.completed?(r.checked=!0,a.innerHTML=`<strike>${n.title}</strike>`):(r.checked=!1,a.innerHTML=`${n.title}`),f(),r.addEventListener("click",(function(){0==n.completed?(r.checked=!0,n.completed=!0,a.innerHTML=`<strike>${n.title}</strike>`):(r.checked=!1,n.completed=!1,a.innerHTML=`${n.title}`),We(e,t)})),o.addEventListener("click",(function(){d.style.display="none",t.deleteTask(n.id),We(e,t)})),document.querySelector(`.task-edit-${n.id}`).addEventListener("click",(function(){const r=document.createElement("div");d.appendChild(r),r.innerHTML=`<form id="edit-task-${n.id}">\n                            <label for="title">\n                              <input type="text" name="title" id="title" value="${n.title}">\n                            </label>\n                            <label for="description">\n                              <input type="text" name="description" id="description" value="${n.description}">\n                            </label>\n                            <label for="dueDate">\n                              <input type="date" name="dueDate" id="dueDate" value="${Ce(n.dueDate,"yyyy-MM-dd")}">\n                            </label>\n                            <label for="priority">\n                              <select name="priority" id="priority">\n                                <option value="high">High</option>\n                                <option value="moderate">Moderate</option>\n                                <option value="low">Low</option>\n                              </select>\n                            </label>\n                            <input type="submit" value="Submit">\n                          </form>`,c.style.display="none",i.style.display="none",document.querySelector(`#edit-task-${n.id}`).addEventListener("submit",(function(i){i.preventDefault();const o=i.currentTarget.title.value,d=i.currentTarget.description.value,u=Te(i.currentTarget.dueDate.value),s=i.currentTarget.priority.value;n.title=o,n.description=d,n.dueDate=u,n.priority=s,n.completed?a.innerHTML=`<strike>${n.title}</strike>`:a.innerHTML=`${n.title}`,l.innerHTML=`${Ce(n.dueDate,"M/dd/yy")}`,m.innerHTML=d,f(),c.style.display="flex",r.remove(),We(e,t)}))}))}))}function Oe(e,t){document.getElementById("content");const n=document.createElement("div");n.classList.add("overlay");const r=document.createElement("div");r.classList.add("new-task-div");const a=document.createElement("button");a.classList.add("open-new-task-button"),a.innerHTML="Add New Task",r.innerHTML='<form id="new-task">\n                <h3>New Task</h3>\n                <label for="title">Title\n                  <input type="text" name="title" id="title">\n                </label><br>\n                <label for="description">Description\n                  <input type="text" name="description" id="description">\n                </label><br>\n                <label for="dueDate">Due-date\n                  <input type="date" name="dueDate" id="dueDate">\n                </label><br>\n                <label for="priority">Priority\n                  <select name="priority" id="priority">\n                    <option value="high">High</option>\n                    <option value="moderate">Moderate</option>\n                    <option value="low">Low</option>\n                  </select>\n                </label><br>\n                <input type="submit" value="Submit">\n              </form>',document.querySelector(".header").appendChild(a);const i=document.body;i.appendChild(n),i.appendChild(r),document.querySelector("#new-task").addEventListener("submit",(function(a){a.preventDefault();const i=a.currentTarget.title.value,o=a.currentTarget.description.value,d=Te(a.currentTarget.dueDate.value),u=a.currentTarget.priority.value;console.log(t.getCounter());const s={id:t.getCounter(),title:i,description:o,dueDate:d,priority:u,completed:!1};t.addTask(s),He(e,t),r.style.visibility="hidden",n.style.visibility="hidden",We(e,t)})),a.addEventListener("click",(function(){r.style.visibility="visible",n.style.visibility="visible"})),n.addEventListener("click",(function(){r.style.visibility="hidden",n.style.visibility="hidden"}))}let Ie,Fe=0,ze=JSON.parse(localStorage.getItem("projects")||"[]");0==ze.length?(ze.push(h(Fe++,"My First Project")),Ie=ze[0]):(ze=ze.map((e=>{let t=h(Fe++,e.name,e.tasks);return t.setCounter(e.counter),t})),Ie=ze[JSON.parse(localStorage.getItem("currentProject"))]),function(e){const t=document.getElementById("content"),n=document.createElement("div");n.classList.add("header");const r=document.createElement("h1");r.innerHTML="ToDo!";const a=document.createElement("h2");a.innerHTML=e.getName(),a.dataset.project=e.getId(),a.classList.add("header-project-name"),n.appendChild(r),n.appendChild(a),t.appendChild(n)}(Ie),Oe(ze,Ie);const Re=document.getElementById("content"),Xe=document.createElement("div");Xe.id="body",Re.appendChild(Xe),function(e,t,n){const r=document.getElementById("content"),a=document.createElement("div");a.classList.add("sidebar");const i=document.createElement("button");i.classList.add("add-project"),i.innerHTML="Add New Project",a.appendChild(i);const o=document.createElement("div");o.classList.add("projects-container");const d=[];function u(){o.innerHTML="",e.forEach((e=>{const t=document.createElement("div");t.classList.add("project",`project-${e.getId()}`);const n=document.createElement("div");n.setAttribute("id",`project-${e.getId()}`),n.classList.add("project-name"),n.innerHTML=e.getName();const r=document.createElement("div");r.classList.add("project-buttons",`project-buttons-${e.getId()}`),r.innerHTML=`<button class="project-edit-${e.getId()}">Edit</button>\n                                  <button class="project-delete-${e.getId()}">Delete</button>`,r.style.display="none",d.push(r),t.appendChild(n),t.appendChild(r),o.appendChild(t)})),a.appendChild(o)}function s(){e.forEach((n=>{const r=document.querySelector(`#project-${n.getId()}`),a=document.querySelector(`.project-buttons-${n.getId()}`),i=document.querySelector(`.project-edit-${n.getId()}`),o=document.querySelector(`.project-delete-${n.getId()}`),u=document.querySelector(`.project-${n.getId()}`),s=document.querySelector(".header-project-name");r.addEventListener("click",(function(){d.forEach((e=>{e.style.display="none"})),a.style.display="block",He(e,n),document.querySelector(".header-project-name").innerHTML=n.getName(),function(){const e=document.querySelector(".overlay"),t=document.querySelector(".new-task-div"),n=document.querySelector(".open-new-task-button");e.remove(),t.remove(),n.remove()}(),Oe(e,n)})),o.addEventListener("click",(function(){const r=`Are you sure you want to delete ${n.getName()}?`;confirm(r)&&(u.remove(),e.splice(n.getId(),1),s.innerHTML="",document.querySelector("#body").innerHTML="",We(e,t))})),i.addEventListener("click",(function(){const e=document.createElement("div");u.appendChild(e),e.innerHTML=`<form id=edit-project-${n.getId()}>\n                                  <label for='projectName'>\n                                    <input type="text" name="projectName" id="projectName" value="${n.getName()}">\n                                  </label>\n                                  <input type="submit" value="Submit">\n                                </form>`,a.style.display="none",r.style.display="none",document.querySelector(`#edit-project-${n.getId()}`).addEventListener("submit",(function(t){t.preventDefault();const a=t.currentTarget.projectName.value;n.setName(a),r.innerHTML=n.getName(),r.style.display="block",s.innerHTML=n.getName(),e.remove()}))}))}))}u(),r.appendChild(a),s(),i.addEventListener("click",(function(){const r=document.createElement("div");r.classList.add("new-project"),r.innerHTML='<form id=\'new-project\'>\n                  <label for=\'projectName\'>\n                    <input type="text" name="projectName" id="projectName" value="Project Name">\n                  </label>\n                  <input type="submit" value="Submit">\n                </form>',a.appendChild(r),document.querySelector("#new-project").addEventListener("submit",(function(a){a.preventDefault();const i=a.currentTarget.projectName.value,o=h(n++,i);e.push(o),u(),r.remove(),s(),We(e,t)}))}))}(ze,Ie,Fe),He(ze,Ie)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,